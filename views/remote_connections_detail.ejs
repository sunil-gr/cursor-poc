<!-- Remote Connections Detail Page Content -->
<div class="dashboard-container">
  <div class="dashboard-header-row">
    <h1 class="dashboard-header-title">Remote Connections</h1>
    <a href="/usage-metrics" class="dashboard-back-btn">&larr; Back to Dashboard</a>
  </div>
  
  <div class="section-card">
    <h2>All Remote Connections (Last 30 Days)</h2>
    <div class="table-responsive">
      <table id="remoteConnectionsTable" class="table table-striped table-hover">
        <thead>
          <tr>
            <th>#</th>
            <th>Connection Type</th>
            <th>Details</th>
            <th>Source</th>
            <th>Timestamp</th>
          </tr>
        </thead>
        <tbody>
          <!-- Data will be populated by JavaScript -->
        </tbody>
      </table>
    </div>
  </div>
</div>

<!-- Include DataTables CSS and JS -->
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.7/css/jquery.dataTables.css">
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/responsive/2.5.0/css/responsive.dataTables.min.css">
<script type="text/javascript" charset="utf8" src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.js"></script>
<script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/responsive/2.5.0/js/dataTables.responsive.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Function to determine connection type
  function getConnectionType(connection) {
    const key = (connection.key || '').toLowerCase();
    const value = (connection.value || '').toLowerCase();
    
    if (key.includes('ssh') || value.includes('ssh')) return 'SSH';
    if (key.includes('remote') || value.includes('remote')) return 'Remote';
    if (key.includes('network') || value.includes('network')) return 'Network';
    if (key.includes('connection') || value.includes('connection')) return 'Connection';
    return 'Unknown';
  }

  // Function to populate remote connections table
  function populateRemoteConnectionsTable(connections) {
    const table = document.querySelector('#remoteConnectionsTable tbody');
    
    if (!table) {
      return;
    }
    
    // Clear the table
    table.innerHTML = '';
    
    if (!connections || connections.length === 0) {
      table.innerHTML = '<tr><td colspan="5" class="text-center">No remote connections found</td></tr>';
      return;
    }
    
    // Add all connections to table
    connections.forEach((connection, index) => {
      const row = document.createElement('tr');
      
      const connectionType = getConnectionType(connection);
      const details = connection.value || connection.key || 'No details';
      const source = connection.key || 'Unknown source';
      const timestamp = connection.timestamp ? new Date(connection.timestamp).toLocaleString() : 'Unknown';
      
      row.innerHTML = `
        <td>${index + 1}</td>
        <td><span class="badge badge-info">${connectionType}</span></td>
        <td title="${details}">${details.length > 100 ? details.substring(0, 97) + '...' : details}</td>
        <td>${source}</td>
        <td>${timestamp}</td>
      `;
      table.appendChild(row);
    });
  }

  // Function to load remote connections data
  async function loadRemoteConnectionsData() {
    try {
      // Fetch all data to get network info
      const response = await fetch('/api/metrics?days=30');
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.networkInfo && data.networkInfo.remoteConnections) {
        // Populate table with all connections
        populateRemoteConnectionsTable(data.networkInfo.remoteConnections);
        
        // Initialize DataTable with pagination
        if (typeof $ !== 'undefined' && $.fn.DataTable) {
          // Destroy existing DataTable if it exists
          if ($.fn.DataTable.isDataTable('#remoteConnectionsTable')) {
            $('#remoteConnectionsTable').DataTable().destroy();
          }
          
          // Initialize new DataTable with full pagination
          $('#remoteConnectionsTable').DataTable({
            pageLength: 25,
            order: [[0, 'desc']],
            responsive: true,
            lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
            language: {
              search: "Search connections:",
              lengthMenu: "Show _MENU_ connections per page",
              info: "Showing _START_ to _END_ of _TOTAL_ connections",
              paginate: {
                first: "First",
                last: "Last",
                next: "Next",
                previous: "Previous"
              }
            }
          });
        }
      } else {
        const table = document.querySelector('#remoteConnectionsTable tbody');
        if (table) {
          table.innerHTML = '<tr><td colspan="5" class="text-center">No remote connections data available</td></tr>';
        }
      }
      
    } catch (error) {
      console.error('Error loading remote connections data:', error);
      const table = document.querySelector('#remoteConnectionsTable tbody');
      if (table) {
        table.innerHTML = '<tr><td colspan="5" class="text-center text-danger">Error loading data: ' + error.message + '</td></tr>';
      }
    }
  }

  // Load data when page loads
  loadRemoteConnectionsData();
});
</script> 