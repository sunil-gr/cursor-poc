<!-- Generations Detail Page Content -->
<div class="dashboard-container">
  <div class="dashboard-header-row">
    <h1 class="dashboard-header-title">All Generations</h1>
    <a href="/usage-metrics" class="dashboard-back-btn">&larr; Back to Dashboard</a>
  </div>
  
  <div class="section-card">
    <h2>All Generations</h2>
    <div class="table-responsive">
      <table id="generationsTable" class="table table-striped table-hover">
        <thead>
          <tr>
            <th>#</th>
            <th>Description</th>
            <th>Type</th>
            <th>Timestamp</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>
          <!-- Data will be populated by JavaScript -->
        </tbody>
      </table>
    </div>
  </div>
</div>

<!-- Include DataTables CSS and JS -->
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.7/css/jquery.dataTables.css">
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/responsive/2.5.0/css/responsive.dataTables.min.css">
<script type="text/javascript" charset="utf8" src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.js"></script>
<script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/responsive/2.5.0/js/dataTables.responsive.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Function to populate generations table
  function populateGenerationsTable(generations) {
    const table = document.querySelector('#generationsTable tbody');
    
    if (!table) {
      return;
    }
    
    // Clear the table
    table.innerHTML = '';
    
    if (!generations || generations.length === 0) {
      table.innerHTML = '<tr><td colspan="5" class="text-center">No generations found</td></tr>';
      return;
    }
    
    // Add all generations to table
    generations.forEach((generation, index) => {
      const row = document.createElement('tr');
      const timestamp = generation.timestamp || (generation.unixMs ? new Date(generation.unixMs).toLocaleString() : 'Unknown');
      const description = generation.description || generation.textDescription || 'No description';
      const type = generation.type || 'Unknown';
      const status = generation.status || 'Completed';
      
      row.innerHTML = `
        <td>${index + 1}</td>
        <td>${description}</td>
        <td>${type}</td>
        <td>${timestamp}</td>
        <td><span class="badge badge-${status === 'Completed' ? 'success' : 'warning'}">${status}</span></td>
      `;
      table.appendChild(row);
    });
  }

  // Function to load generations data
  async function loadGenerationsData() {
    try {
      // Fetch all generations with a large limit to get all data
      const response = await fetch('/api/metrics/generations?days=30&limit=10000');
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      // Populate table with all generations
      populateGenerationsTable(data.generations);
      
      // Initialize DataTable with pagination
      if (typeof $ !== 'undefined' && $.fn.DataTable) {
        // Destroy existing DataTable if it exists
        if ($.fn.DataTable.isDataTable('#generationsTable')) {
          $('#generationsTable').DataTable().destroy();
        }
        
        // Initialize new DataTable with full pagination
        $('#generationsTable').DataTable({
          pageLength: 50,
          order: [[0, 'desc']],
          responsive: true,
          lengthMenu: [[25, 50, 100, 250, -1], [25, 50, 100, 250, "All"]],
          language: {
            search: "Search generations:",
            lengthMenu: "Show _MENU_ generations per page",
            info: "Showing _START_ to _END_ of _TOTAL_ generations",
            paginate: {
              first: "First",
              last: "Last",
              next: "Next",
              previous: "Previous"
            }
          }
        });
      }
      
    } catch (error) {
      console.error('Error loading generations data:', error);
      const table = document.querySelector('#generationsTable tbody');
      if (table) {
        table.innerHTML = '<tr><td colspan="5" class="text-center text-danger">Error loading data: ' + error.message + '</td></tr>';
      }
    }
  }

  // Load data when page loads
  loadGenerationsData();
});
</script> 